# CH07

##Exercises Section 7.1.1

###Exercise 7.1

>Write a version of the transaction-processing program from §1.6(p. 24) using the Sales_data class you defined for theExercises in §2.6.1(p. 72).

```cpp
#include <iostream>
#include <string>

using std::cin;
using std::cout;
using std::endl;
using std::string;

struct Sales_data
{
	string bookNo;
	unsigned units_sold = 0;
	double revenue = 0.0;
};

int main()
{
	Sales_data total;
	if(cin >> total.bookNo >> total.units_sold >> total.revenue)
	{
		Sales_data trans;
		while(cin >> trans.bookNo >> trans.units_sold >> trans.revenue)
		{
			if(total.bookNo == trans.bookNo)
			{
				total.units_sold += trans.units_sold;
				total.revenue += trans.revenue;
			}
			else
			{
				cout << total.bookNo << " " << total.units_sold << " " << total.revenue << endl;
				total = trans;
			}
		}
		cout << total.bookNo << " " << total.units_sold << " " << total.revenue << endl;
	}
	else
	{
		std::cerr << "No data?!" << std::endl;
		return -1;
	}
	return 0;
}
```

##Exercises Section 7.1.2

###Exercise 7.2

>Add the combine and isbn members to the Sales_data class you wrote for the Exercises in §2.6.2(p. 76).

```cpp
struct Sales_data
{
	string isbn() const
	{
		return bookNo;
	}
	Sales_data& combine(const Sales_data &rhs);
	double avg_price() const;

	string bookNo;
	unsigned units_sold = 0;
	double revenue = 0.0;
};

Sales_data& Sales_data::combine(const Sales_data &rhs)
{
	units_sold += rhs.units_sold;
	revenue += rhs.revenue;
	return *this;
}
```

###Exercise 7.3

>Revise your transaction-processing program from §7.1.1(p. 256) to use these members.

```cpp
#include <iostream>
#include <string>

using std::cin;
using std::cout;
using std::string;

struct Sales_data
{
	string isbn() const
	{
		return bookNo;
	}
	Sales_data& combine(const Sales_data &rhs);
	double avg_price() const;

	string bookNo;
	unsigned units_sold = 0;
	double revenue = 0.0;
};

Sales_data& Sales_data::combine(const Sales_data &rhs)
{
	units_sold += rhs.units_sold;
	revenue += rhs.revenue;
	return *this;
}

double Sales_data::avg_price() const
{
	return units_sold == 0 ? 0 : revenue / units_sold;
}

int main()
{
	Sales_data total;
	if(cin >> total.bookNo >> total.units_sold >> total.revenue)
	{
		Sales_data trans;
		while(cin >> trans.bookNo >> trans.units_sold >> trans.revenue)
		{
			if(total.bookNo == trans.bookNo)
			{
				total.combine(trans);
			}
			else
			{
				cout << total.bookNo << " " << total.units_sold << " " << total.revenue << '\n';
				total = trans;
			}
		}
		cout << total.bookNo << " " << total.units_sold << " " << total.revenue << '\n';
	}
	else
	{
		cout << "No data?!" << '\n';
		return -1;
	}
	return 0;
}
```

###Exercise 7.4

>Write a class named Person that represents the name and address of a person. Use a string to hold each of these elements. SubsequentExercises will incrementally add features to this class.

```cpp
class Person
{
	string name;
	string address;
};
```

###Exercise 7.5

>Provide operations in your Person class to return the name and address. Should these functions be const? Explain your choice.

```cpp
class Person
{
public:
	// We should define get_xx functions as const because
	// they don't modify the class members' value.
	string get_name() const
	{
		return name_;
	}
	string get_address() const
	{
		return address_;
	}

private:
	string name_;
	string address_;
};
```

##Exercises Section 7.1.3

###Exercise 7.6

>Define your own versions of the add, read, and print functions.

```cpp
istream& read(istream &is, Sales_data &item)
{
	double price = 0;
	is >> item.bookNo >> item.units_sold >> price;
	item.revenue = price * item.units_sold;
	return is;
}

ostream& print(ostream &os, const Sales_data &item)
{
	os << item.isbn() << ' ' << item.units_sold << ' ' << item.revenue <<
	 ' ' << item.avg_price() << '\n';
	return os;
}

Sales_data add(const Sales_data &lhs, const Sales_data &rhs)
{
	Sales_data sum = lhs;
	sum.combine(rhs);
	return sum;
}
```

###Exercise 7.7

>Rewrite the transaction-processing program you wrote for theExercises in §7.1.2(p. 260) to use these new functions.

```cpp
#include <iostream>
#include <string>

using std::cin;
using std::cout;
using std::string;
using std::istream;
using std::ostream;

struct Sales_data
{
	string isbn() const
	{
		return bookNo;
	}
	Sales_data& combine(const Sales_data &rhs);
	double avg_price() const;

	string bookNo;
	unsigned units_sold = 0;
	double revenue = 0.0;
};

Sales_data& Sales_data::combine(const Sales_data &rhs)
{
	units_sold += rhs.units_sold;
	revenue += rhs.revenue;
	return *this;
}

double Sales_data::avg_price() const
{
	return units_sold == 0 ? 0 : revenue / units_sold;
}

istream& read(istream &is, Sales_data &item)
{
	double price = 0;
	is >> item.bookNo >> item.units_sold >> price;
	item.revenue = price * item.units_sold;
	return is;
}

ostream& print(ostream &os, const Sales_data &item)
{
	os << item.isbn() << ' ' << item.units_sold << ' ' << item.revenue <<
	 ' ' << item.avg_price() << '\n';
	return os;
}

Sales_data add(const Sales_data &lhs, const Sales_data &rhs)
{
	Sales_data sum = lhs;
	sum.combine(rhs);
	return sum;
}

int main()
{
	Sales_data total;
	if(read(cin, total))
	{
		Sales_data trans;
		while(read(cin, trans))
		{
			if(total.bookNo == trans.bookNo)
			{
				total.combine(trans);
			}
			else
			{
				print(cout, total);
				total = trans;
			}
		}
		print(cout, total);
	}
	else
	{
		cout << "No data?!" << '\n';
		return -1;
	}
	return 0;
}
```

###Exercise 7.8

>Why does read define its Sales_data parameter as a plain reference and print define its parameter as a reference to const?

 - Because read needs to modify the object, whereas print doesn’t modify the object.

###Exercise 7.9

>Add operations to read and print Person objects to the code you wrote for theExercises in §7.1.2(p. 260).

```cpp
class Person
{
public:
	string get_name() const
	{
		return name_;
	}
	string get_address() const
	{
		return address_;
	}

private:
	string name_;
	string address_;
};

istream& Read(istream &is, Person &obj)
{
	is >> obj.name_ >> obj.address_;
	return is;
}

ostream& Print(ostream &os, const Person &obj)
{
	os << obj.name_ << ' ' << obj.address_ << '\n';
	return os;
}
```

###Exercise 7.10

>What does the condition in the following if statement do?
`if(read(read(cin, data1), data2))`

 - Read 2 objects one time.

##Exercises Section 7.1.4

###Exercise 7.11

>Add constructors to your Sales_data class and write a program to use each of the constructors.

```cpp
#include <iostream>
#include <string>

using std::cin;
using std::cout;
using std::string;
using std::istream;
using std::ostream;

struct Sales_data
{
	Sales_data() = default;
	Sales_data(const string &str) : bookNo(str) {}
	Sales_data(const string &str, unsigned n, double p) :
		bookNo(str), units_sold(n), revenue(p * n) {}
	Sales_data(istream &);

	string bookNo;
	unsigned units_sold = 0;
	double revenue = 0.0;
};

istream& read(istream &is, Sales_data &item)
{
	double price = 0;
	is >> item.bookNo >> item.units_sold >> price;
	item.revenue = price * item.units_sold;
	return is;
}

ostream& print(ostream &os, const Sales_data &item)
{
	os << item.isbn() << ' ' << item.units_sold << ' ' << item.revenue <<
	 ' ' << item.avg_price() << '\n';
	return os;
}

Sales_data::Sales_data(istream &is)
{
	read(is, *this);
}

int main()
{
	Sales_data obj1;
	Sales_data obj2("gaoxiang");
	Sales_data obj3("gao", 71, 8.8);
	Sales_data obj4(cin);

	print(cout, obj1);
	print(cout, obj2);
	print(cout, obj3);
	print(cout, obj4);

	return 0;
}
```

###Exercise 7.12

>Move the definition of the Sales_data constructor that takes an istream into the body of the Sales_data class.

```cpp
#include <iostream>
#include <string>

using std::string;
using std::istream;

struct Sales_data;
istream& read(istream &is, Sales_data &item);

struct Sales_data
{
	Sales_data() = default;
	Sales_data(const string &str) : bookNo(str) {}
	Sales_data(const string &str, unsigned n, double p) :
		bookNo(str), units_sold(n), revenue(p * n) {}
	Sales_data(istream &is)
	{
		read(is, *this);
	}

	string bookNo;
	unsigned units_sold = 0;
	double revenue = 0.0;
};
```

###Exercise 7.13

>Rewrite the program from page 255 to use the istream constructor.

```cpp
#include <iostream>
#include <string>

using std::cin;
using std::cout;
using std::string;
using std::istream;
using std::ostream;

struct Sales_data;
istream& read(istream &is, Sales_data &item);

struct Sales_data
{
	Sales_data() = default;
	Sales_data(const string &str) : bookNo(str) {}
	Sales_data(const string &str, unsigned n, double p) :
		bookNo(str), units_sold(n), revenue(p * n) {}
	Sales_data(istream &is)
	{
		read(is, *this);
	}

	string isbn() const
	{
		return bookNo;
	}
	Sales_data& combine(const Sales_data &rhs);
	double avg_price() const;

	string bookNo;
	unsigned units_sold = 0;
	double revenue = 0.0;
};

Sales_data& Sales_data::combine(const Sales_data &rhs)
{
	units_sold += rhs.units_sold;
	revenue += rhs.revenue;
	return *this;
}

double Sales_data::avg_price() const
{
	return units_sold == 0 ? 0 : revenue / units_sold;
}

istream& read(istream &is, Sales_data &item)
{
	double price = 0;
	is >> item.bookNo >> item.units_sold >> price;
	item.revenue = price * item.units_sold;
	return is;
}

ostream& print(ostream &os, const Sales_data &item)
{
	os << item.isbn() << ' ' << item.units_sold << ' ' << item.revenue <<
	 ' ' << item.avg_price() << '\n';
	return os;
}

int main()
{
	Sales_data total(cin);
	if(total.bookNo.empty() == false)
	{
		while(cin)
		{
			Sales_data trans(cin);
			if(total.bookNo == trans.bookNo)
			{
				total.combine(trans);
			}
			else
			{
				print(cout, total);
				total = trans;
			}
		}
		print(cout, total);
	}
	else
	{
		cout << "No data?!" << '\n';
		return -1;
	}
	return 0;
}
```

###Exercise 7.14

>Write a version of the default constructor that explicitly initializes the members to the values we have provided as in-class initializers.

```cpp
Sales_data() : units_sold(0) , revenue(0){}
```

###Exercise 7.15

>Add appropriate constructors to your Person class.

```cpp
class Person
{
public:
	Person() = default;
	Person(const string name, const string address) :
		name_(name), address_(address) { }
	Person(istream &is)
	{
		read(is, *this);
	}

	string get_name() const
	{
		return name_;
	}
	string get_address() const
	{
		return address_;
	}

private:
	string name_;
	string address_;
};

istream& Read(istream &is, Person &obj)
{
	is >> obj.name_ >> obj.address_;
	return is;
}

ostream& Print(ostream &os, const Person &obj)
{
	os << obj.name_ << ' ' << obj.address_ << '\n';
	return os;
}
```

##Exercises Section 7.2

###Exercise 7.16

>What, if any, are the constraints on where and how often an access specifier may appear inside a class definition? What kinds of members should be defined after a public specifier? What kinds should be private?

 - No limits.
 - The public members define the interface to the class.
 - The private sections encapsulate the implementation.

###Exercise 7.17

>What, if any, are the differences between using class or struct?

 - The default access level. struct: the members defined before the first access specifier are public; class: private.

###Exercise 7.18

>What is encapsulation? Why is it useful?

 - Encapsulation enforces the separation of a class’ interface and implementation. A class that is encapsulated hides its implementation: users of the class can use the interface but have no access to the implementation.
 - Advantages:
1. User code cannot inadvertently corrupt the state of an encapsulated object.
2. The implementation of an encapsulated class can change over time without requiring changes in user-level code.

###Exercise 7.19

>Indicate which members of your Person class you would declare as public and which you would declare as private. Explain your choice.

 - public: constructors, get_name(), get_address().
private: name_, address_.
 - The interface should be defined as public, the data shouldn't expose to outside of the class.

##Exercises Section 7.2.1

###Exercise 7.20

>When are friends useful? Discuss the pros and cons of using friends.

 - Class can allow another class or function to access its nonpublic members by making that class or function a friend.
 - Pros:
1. The useful functions can refer to class members in the class scope without needing to explicitly prefix them with the class name.
2. You can access all the nonpublic members conveniently.
 - Cons:
Lessens encapsulation and therefore maintainability.
Code verbosity, declarations inside the class, outside the class.

###Exercise 7.21

>Update your Sales_data class to hide its implementation. The programs you’ve written to use Sales_data operations should still continue to work. Recompile those programs with your new class definition to verify that they still work.

```cpp
#include <iostream>
#include <string>

using std::cin;
using std::cout;
using std::string;
using std::istream;
using std::ostream;

class Sales_data;
istream& read(istream &, Sales_data &);
ostream& print(ostream &, const Sales_data &);
Sales_data add(const Sales_data &, const Sales_data &);

class Sales_data
{
	friend istream& read(istream &, Sales_data &);
	friend ostream& print(ostream &, const Sales_data &);
	friend Sales_data add(const Sales_data &, const Sales_data &);

public:
	Sales_data() = default;
	Sales_data(const string &str) : bookNo(str) {}
	Sales_data(const string &str, unsigned n, double p) :
		bookNo(str), units_sold(n), revenue(p * n) {}
	Sales_data(istream &is)
	{
		read(is, *this);
	}
	string isbn() const
	{
		return bookNo;
	}
	Sales_data& combine(const Sales_data &rhs);

private:
	double avg_price() const
	{
		return units_sold == 0 ? 0 : revenue / units_sold;
	}
	string bookNo;
	unsigned units_sold = 0;
	double revenue = 0.0;
};

Sales_data& Sales_data::combine(const Sales_data &rhs)
{
	units_sold += rhs.units_sold;
	revenue += rhs.revenue;
	return *this;
}

istream& read(istream &is, Sales_data &item)
{
	double price = 0;
	is >> item.bookNo >> item.units_sold >> price;
	item.revenue = price * item.units_sold;
	return is;
}

ostream& print(ostream &os, const Sales_data &item)
{
	os << item.isbn() << ' ' << item.units_sold << ' ' << item.revenue <<
	 ' ' << item.avg_price() << '\n';
	return os;
}

Sales_data add(const Sales_data &lhs, const Sales_data &rhs)
{
	Sales_data sum = lhs;
	sum.combine(rhs);
	return sum;
}

int main()
{
	Sales_data total(cin);
	if(total.isbn().empty() == false)
	{
		while(cin)
		{
			Sales_data trans(cin);
			if(total.isbn() == trans.isbn())
			{
				total.combine(trans);
			}
			else
			{
				print(cout, total);
				total = trans;
			}
		}
		print(cout, total);
	}
	else
	{
		cout << "No data?!" << '\n';
		return -1;
	}
	return 0;
}
```

###Exercise 7.22

>Update your Person class to hide its implementation.

```cpp
class Person;
istream& Read(istream &, Person &);
ostream& Print(ostream &, const Person &);

class Person
{
	friend istream& Read(istream &, Person &);
	friend ostream& Print(ostream &, const Person &);

public:
	Person() = default;
	Person(const string name, const string address) :
		name_(name), address_(address) { }
	Person(istream &is)
	{
		Read(is, *this);
	}

	string get_name() const
	{
		return name_;
	}
	string get_address() const
	{
		return address_;
	}

private:
	string name_;
	string address_;
};

istream& Read(istream &is, Person &obj)
{
	is >> obj.name_ >> obj.address_;
	return is;
}

ostream& Print(ostream &os, const Person &obj)
{
	os << obj.name_ << ' ' << obj.address_ << '\n';
	return os;
}
```

##Exercises Section 7.3.1

###Exercise 7.23

>Write your own version of the Screen class.

```cpp
#include <iostream>
#include <string>
#include <vector>

using std::cin;
using std::cout;
using std::string;
using std::vector;

class Screen
{
public:
	typedef	string::size_type	pos;

	Screen() = default;
	Screen(pos ht, pos wd, char c) : height(ht), width(wd), contents(ht * wd, c) {}
	char get() const
	{
		return contents[cursor];
	}
	inline char get(pos ht, pos wd) const;
	Screen &move(pos r, pos c);
	void some_member() const
	{
		++access_ctr;
	}

private:
	pos cursor = 0;
	pos height = 0, width = 0;
	string contents;
	mutable size_t access_ctr;
};

inline Screen& Screen::move(pos r, pos c)
{
	pos row = r * width;
	cursor = row + c;
	return *this;
}

char Screen::get(pos r, pos c) const
{
	pos row = r * width;
	return contents[row + c];
}

int main()
{
	Screen obj(10, 10, 'g');

	return 0;
}
```

###Exercise 7.24

>Give your Screen class three constructors: a default constructor; a constructor that takes values for height and width and initializes the contents to hold the given number of blanks; and a constructor that takes values for height, width, and a character to use as the contents of the screen.

```cpp
Screen() = default;
Screen(pos ht, pos wd) : height(ht), width(wd), contents(ht * wd, ' ') {}
Screen(pos ht, pos wd, char c) : height(ht), width(wd), contents(ht * wd, c) {}
```

###Exercise 7.25

>Can Screen safely rely on the default versions of copy and assignment? If so, why? If not, why not?

 - Yes. The synthesized versions for copy, assignment, and destruction work correctly for classes that have vector or string members.

###Exercise 7.26

>Define Sales_data::avg_price as an inline function.

```cpp
inline double avg_price() const
{
	return units_sold == 0 ? 0 : revenue / units_sold;
}
```

##Exercises Section 7.3.2

###Exercise 7.27

>Add the move, set, and display operations to your version of Screen. Test your class by executing the following code:

```cpp
Screen myScreen(5, 5, 'X');
myScreen.move(4,0).set('#').display(cout);
cout << "\n";
myScreen.display(cout);
cout << "\n";
```
```cpp
#include <iostream>
#include <string>
#include <vector>

using std::cin;
using std::cout;
using std::string;
using std::vector;
using std::ostream;

class Screen
{
public:
	typedef	string::size_type	pos;

	Screen() = default;
	Screen(pos ht, pos wd) : height(ht), width(wd), contents(ht * wd, ' ') {}
	Screen(pos ht, pos wd, char c) : height(ht), width(wd), contents(ht * wd, c) {}

	char get() const
	{
		return contents[cursor];
	}
	inline char get(pos ht, pos wd) const;

	Screen &set(char c)
	{
		contents[cursor] = c;
		return *this;
	}
	Screen &set(pos r, pos col, char ch)
	{
		contents[r * width + col] = ch;
		return *this;
	}

	Screen &move(pos r, pos c);

	void some_member() const
	{
		++access_ctr;
	}

	Screen &display(ostream &os)
	{
		do_display(os);
		return *this;
	}
	const Screen &display(ostream &os) const
	{
		do_display(os);
		return *this;
	}

private:
	void do_display(ostream &os) const
	{
		os << contents << '\n';
	}

	pos cursor = 0;
	pos height = 0, width = 0;
	string contents;
	mutable size_t access_ctr;
};

inline Screen& Screen::move(pos r, pos c)
{
	pos row = r * width;
	cursor = row + c;
	return *this;
}

char Screen::get(pos r, pos c) const
{
	pos row = r * width;
	return contents[row + c];
}

int main()
{
	Screen obj(5, 5, 'X');
	obj.move(4, 0).set('#').display(cout);
	obj.display(cout);

	return 0;
}
```

###Exercise 7.28

>What would happen in the previous###Exercise if the return type of move, set, and display was Screen rather than Screen&?

 - Our object doesn’t change at all.

###Exercise 7.29

>Revise your Screen class so that move, set, and display functions return Screen and check your prediction from the previousExercise.

 - Yes.
XXXXXXXXXXXXXXXXXXXX#XXXX
XXXXXXXXXXXXXXXXXXXXXXXXX

###Exercise 7.30

>It is legal but redundant to refer to members through the this pointer. Discuss the pros and cons of explicitly using the this pointer to access members.

 - Pros
1. More explicit.
2. Can use the member function parameter which name is same as the member name.
```cpp
void set(const std::string &addr)
{
	this->addr = addr;
}
```
 - Cons: More to read, redundant

##Exercises Section 7.3.3

###Exercise 7.31

>Define a pair of classes X and Y, in which X has a pointer to Y, and Y has an object of type X.

```cpp
#include <iostream>

class Y;

class X
{
	Y *ptr;
};

class Y
{
	X obj;
};

int main()
{
X obj_x;
Y obj_y;

return 0;
}
```

##Exercises Section 7.3.4

###Exercise 7.32

>Define your own versions of Screen and Window_mgr in which clear is a member of Window_mgr and a friend of Screen.

```cpp
#include <iostream>
#include <string>
#include <vector>

using std::cin;
using std::cout;
using std::string;
using std::vector;
using std::ostream;

class Screen;

class Window_mgr
{
public:
	using ScreenIndex = vector<Screen>::size_type;
	void clear(ScreenIndex i);

private:
	vector<Screen> screens;
};

class Screen
{
	friend void Window_mgr::clear(ScreenIndex);

public:
	typedef	string::size_type	pos;

	Screen(pos ht, pos wd, char c) : height(ht), width(wd), contents(ht * wd, c) {}

private:
	pos cursor = 0;
	pos height = 0, width = 0;
	string contents;
};

void Window_mgr::clear(ScreenIndex i)
{
	Screen &s = screens[i];
	s.contents = string(s.height * s.width, ' ');
}

int main()
{

	return 0;
}
```

##Exercises Section 7.4

###Exercise 7.33

>What would happen if we gave Screen a size member defined as follows? Fix any problems you identify.

```cpp
pos Screen::size() const
{
	return height * width;
}
```
 - `Screen::pos`

##Exercises Section 7.4.1

###Exercise 7.34

>What would happen if we put the typedef of pos in the Screen class on page 285 as the last line in the class?

 - There is an error in `dummy_fcn(pos height);  // unknown type name 'pos'`

###Exercise 7.35

>Explain the following code, indicating which definition of Type or Init_Val is used for each use of those names. Say how you would fix any errors.

```cpp
typedef string Type;
Type Init_Val();

class Exercise
{
public:
	typedef double Type;// error
	Type Set_Val(Type);
	Type Init_Val();

private:
	int val;
};

Type Exercise::Set_Val(Type parameter)// Type is string,
{
	val = parameter + Init_Val();// val is: int; Init_Val is the class member
	return val;
}
```
```cpp
#include <iostream>
#include <string>

using std::cout;
using std::string;

typedef string Type;
Type Init_Val();

class Exercise
{
public:
	Type Set_Val(Type);
	Type Init_Val()
	{
		return "gaoxiangnumber1";
	}

private:
	int val;
};

Type Exercise::Set_Val(Type parm)
{
	Type val = parm + Init_Val();
	return val;
}

int main()
{
	###Exercise obj;
	cout << obj.Set_Val("hello ");

	return 0;
}
```

##Exercises Section 7.5.1

###Exercise 7.36

>The following initializer is in error. Identify and fix the problem.

```cpp
struct X
{
	X(int i, int j): base(i), rem(base % j) { }
	int rem, base;
};
```
```
struct X
{
	X(int i, int j): base(i), rem(i % j) { }
	int rem, base;
};
```

###Exercise 7.37

>Using the version of Sales_data from this section, determine which constructor is used to initialize each of the following variables and list the values of the data members in each object:

```cpp
Sales_data first_item(cin);
int main()
{
	Sales_data next;
	Sales_data last("9-999-99999-9");
}
```
 - `Sales_data(std::istream &is);` value up to input. 
 - `Sales_data(std::string s = "");` bookNo = "", cnt = 0, revenue = 0.0
 - `Sales_data(std::string s = "");` bookNo = "9-999-99999-9", cnt = 0, revenue = 0.0

###Exercise 7.38

>We might want to supply cin as a default argument to the constructor that takes an istream&. Write the constructor declaration that uses cin as a default argument.

 - `Sales_data(istream &is = cin);`

###Exercise 7.39

>Would it be legal for both the constructor that takes a string and the one that takes an istream& to have default arguments? If not, why not?

 - No: `error: call of overloaded ‘Sales_data()’ is ambiguous`

###Exercise 7.40

>Choose one of the following abstractions(or an abstraction of your own choosing). Determine what data are needed in the class. Provide an appropriate set of constructors. Explain your decisions.
(a) Book
(b) Date
(c) Employee
(d) Vehicle
(e) Object
(f) Tree

```cpp
#include <iostream>
#include <string>

class Book
{
public:
	Book(unsigned isbn, std::string const& name, std::string const& author, std::string const& pub_date)
		:isbn_(isbn), name_(name), author_(author), pub_date_(pub_date) {}
	explicit Book(std::istream &in)
	{
		in >> isbn_ >> name_ >> author_ >> pub_date_;
	}
	
private:
	unsigned isbn_;
	std::string name_;
	std::string author_;
	std::string pub_date_;
};
```

##Exercises Section 7.5.2

###Exercise 7.41

>Rewrite your own version of the Sales_data class to use delegating constructors. Add a statement to the body of each of the constructors that prints a message whenever it is executed. Write declarations to construct a Sales_data object in every way possible. Study the output until you are certain you understand the order of execution among delegating constructors.

```cpp
#include <iostream>
#include <string>

using std::cin;
using std::cout;
using std::string;
using std::istream;

class Sales_data
{
public:
	Sales_data(string s, unsigned cnt, double price) :
		bookNo(s), units_sold(cnt), revenue(cnt*price)
	{
		cout << "Sales_data(string s, unsigned cnt, double price)\n";
	}

	Sales_data() : Sales_data("", 0, 0)
	{
		cout << "Sales_data() : Sales_data("", 0, 0)\n";
	}
	Sales_data(string s) : Sales_data(s, 0,0)
	{
		cout << "Sales_data(string s) : Sales_data(s, 0,0)\n";
	}
	Sales_data(istream &is) : Sales_data()
	{
		cout << "Sales_data(istream &is) : Sales_data()\n";
	}

private:
	string bookNo;
	unsigned units_sold = 0;
	double revenue = 0.0;
};

int main()
{
	cout << "Sales_data obj1:\n";
	Sales_data obj1;
	cout << "\nSales_data obj2(""gaoxiangnumber1""):\n";
	Sales_data obj2("gaoxiangnumber1");
	cout << "\nSales_data obj3(cin):\n";
	Sales_data obj3(cin);
	cout << "\nSales_data obj4(""gao"", 71, 8.8):\n";
	Sales_data obj4("gao", 71, 8.8);

	return 0;
}
/*
Output:
Sales_data obj1:
Sales_data(string s, unsigned cnt, double price)
Sales_data() : Sales_data(, 0, 0)

Sales_data obj2(gaoxiangnumber1):
Sales_data(string s, unsigned cnt, double price)
Sales_data(string s) : Sales_data(s, 0,0)

Sales_data obj3(cin):
Sales_data(string s, unsigned cnt, double price)
Sales_data() : Sales_data(, 0, 0)
Sales_data(istream &is) : Sales_data()

Sales_data obj4(gao, 71, 8.8):
Sales_data(string s, unsigned cnt, double price)
*/
```

###Exercise 7.42

>For the class you wrote for ###Exercise 7.40 in §7.5.1(p. 291), decide whether any of the constructors might use delegation. If so, write the delegating constructor(s) for your class. If not, look at the list of abstractions and choose one that you think would use a delegating constructor. Write the class definition for that abstraction.

```cpp
class Book
{
public:
	Book(unsigned isbn, std::string const& name, std::string const& author, std::string const& pub_date)
		:isbn_(isbn), name_(name), author_(author), pub_date_(pub_date) {}
	explicit Book(std::istream &in)
	{
		in >> isbn_ >> name_ >> author_ >> pub_date_;
	}

private:
	unsigned isbn_;
	std::string name_;
	std::string author_;
	std::string pub_date_;
};
```


